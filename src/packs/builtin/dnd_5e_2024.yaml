metadata:
  id: dnd_5e_2024
  name: Dungeons & Dragons 5e (2024)
  version: 1.0.0
  author: Maxime Hendryx-Parker
  license: "CC BY 4.0 SRD portions; see notes"
  homepage: ""

schema:
  # 1) Core attributes
  attributes:
    - { id: str, label: Strength, min: 1, max: 30, default: 10, description: Physical power }
    - { id: dex, label: Dexterity, min: 1, max: 30, default: 10, description: Agility and reflexes }
    - { id: con, label: Constitution, min: 1, max: 30, default: 10, description: Endurance and vitality }
    - { id: int, label: Intelligence, min: 1, max: 30, default: 10, description: Reasoning and memory }
    - { id: wis, label: Wisdom, min: 1, max: 30, default: 10, description: Perception and will }
    - { id: cha, label: Charisma, min: 1, max: 30, default: 10, description: Force of personality }

  # 2) Health model
  health:
    model: "resource"
    resourceId: "hp"
    deathSaveStyle: "5e"

  # 3) Inventory and equipment slots
  inventory:
    mode: "weight_limit"
    maxSlots: 36
    weightLimitFormula: "attr.str * 15"
    slotTypes:
      - { id: head, label: Head, maxEquipped: 1 }
      - { id: armor, label: Armor, maxEquipped: 1 }
      - { id: footwear, label: Footwear, maxEquipped: 1 }
      - { id: gloves, label: Gloves, maxEquipped: 1 }
      - { id: ring, label: Ring, maxEquipped: 2 }
      - { id: main_hand, label: Main Hand, maxEquipped: 1 }
      - { id: off_hand, label: Off Hand, maxEquipped: 1 }

  # 4) Dice handling
  dice:
    advantageRule: "take_higher_of(roll(d20), roll(d20))"
    disadvantageRule: "take_lower_of(roll(d20), roll(d20))"
    criticalHit:
      threshold: 20
      damageRule: "double_dice"

  # 5) Progression system
  progression:
    modes:
      characterLevel: true
      classLevel: true
      skillLevel: false
    xp:
      track: "character"
      expToLevel: "round((level ^ 2) * 300)"
    proficiency:
      formula: "lookup('prof_by_level', level)"

  # 6) Spellcasting
  spellcasting:
    style: "slots"
    slots:
      table: "spell_slots_by_level"
    mana:
      resourceId: "mana"
      spendRule: "cost = spellLevel * 2"
      regenFormula: "0"

  # 7) Rest and regeneration
  rest:
    shortRest:
      healthRegen: "roll(hit_die) * proficiency"
      manaRegen: "0"
    longRest:
      healthRegen: "res.hp.max"
      manaRegen: "res.mana.max"
    overtime:
      tickSeconds: 0
      healthPerTick: "0"
      manaPerTick: "0"

  # 8) Economy
  economy:
    hasCurrency: true
    carryAffectsMovement: true
    coinWeight: 0.02
    currencies:
      - { id: pp, label: Platinum, ratioToBase: 1000 }
      - { id: gp, label: Gold, ratioToBase: 100 }
      - { id: sp, label: Silver, ratioToBase: 10 }
      - { id: cp, label: Copper, ratioToBase: 1 }

  # 9) Resource definitions
  resources:
    - { id: hp, label: Hit Points, defaultMaxFormula: "base_hp + mod(attr.con) * level" }
    - { id: hit_dice, label: Hit Dice, defaultMaxFormula: "level", die: "d10" }
    - { id: mana, label: Mana, defaultMaxFormula: "0" }

  # 10) Derived formulas
  derived:
    - { id: str_mod, label: Strength Mod, formula: "mod(attr.str)" }
    - { id: dex_mod, label: Dexterity Mod, formula: "mod(attr.dex)" }
    - { id: proficiency_bonus, label: Proficiency Bonus, formula: "lookup('prof_by_level', level)" }
    # Updated to generic helpers:
    - { id: armor_class, label: Armor Class, formula: "10 + cap(derived.dex_mod, 'ac.dex') + bonus('ac.shield')" }
    - { id: initiative, label: Initiative, formula: "dex_mod" }
    - { id: carry_capacity, label: Carry Capacity, formula: "attr.str * 15" }

  # 11) Tags for classification
  tags: [ melee, ranged, spell, fire, cold, slashing, piercing, bludgeoning ]

rules:
  operators: [ add, sub, mul, div, min, max, floor, ceil, round, clamp, if, and, or, not ]
  stackingPolicies:
    - additive
    - highest_only
    - typed_bonus_non_stack
    - multiply_after_add

  formulas:
    mod: "declare:number -> number"
    roll: "declare:dice -> number"
    take_higher_of: "declare:number,number -> number"
    take_lower_of: "declare:number,number -> number"
    # legacy names are no longer needed; kept here for docs
    # armor_cap: "declare:() -> number"
    # dex_cap: "declare:number,number -> number"
    # shield_bonus: "declare:() -> number"

  # Lookup tables filled from ./lookups
  lookups:
    prof_by_level: {}
    spell_slots_by_level: {}

  # Optional tag-driven caps/bonuses, consumed by summarizeEquipmentVars
  tagCaps:
    armor_heavy: { "ac.dex": 0 }
    armor_medium: { "ac.dex": 2 }
    armor_light: { "ac.dex": Infinity }

  tagBonuses:
    shield: { "ac.shield": 2 }

  # Per-key stacking modes for summarizeEquipmentVars aggregation
  stacking:
    caps:
      default: min
    bonuses:
      default: sum
      ac.shield: max

  triggers: []
  dependencyHints: []

# Will be filled out with content from ./content/*
content: {}

uiPreset:
  layout:
    content: []
  panelOptions:
    attributes:
      order: [ str, dex, con, int, wis, cha ]
    inventory:
      showWeight: true
      showSlots: true
  theme: {}
